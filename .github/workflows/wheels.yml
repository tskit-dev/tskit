name: Build and test wheels

on:
  push:
    branches:
      - main
      - test
    tags:
      - '*'
  release:
    types: [published]

jobs:
  OSX:
    runs-on: macos-latest
    strategy:
      matrix:
        python: [3.7, 3.8, 3.9]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
            submodules: true
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Install deps
        run: |
          # Upgrade pip to get bdist_wheel
          pip install --upgrade pip
          pip install setuptools wheel
          # Instead of letting setup.py install a newer numpy we install it here
          # using the oldest supported version for ABI compatibility
          pip install oldest-supported-numpy
      - name: Build C extension
        run: |
          cd python
          python -VV
          python setup.py build_ext --inplace
      - name: Build Wheel
        run: |
          cd python
          python setup.py bdist_wheel
      - name: Delocate to bundle dynamic libs
        run: |
          cd python
          pip install delocate
          delocate-wheel -v dist/*.whl
      - name: Upload Wheels
        uses: actions/upload-artifact@v2
        with:
          name: osx-wheel-${{ matrix.python }}
          path: python/dist

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python: [3.7, 3.8, 3.9]
        wordsize: [64]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
            submodules: true
      - name: Install deps
        env:
          PYTHON: "py -${{ matrix.python }}-${{ matrix.wordsize }}"
        shell: bash
        run: |
          set -ex
          ${PYTHON} -m pip install --upgrade pip
          ${PYTHON} -m pip install setuptools wheel
          # Instead of letting setup.py install a newer numpy we install it here
          # using the oldest supported version for ABI compatibility
          ${PYTHON} -m pip install oldest-supported-numpy
      - name: Build C Extension
        env:
          PYTHON: "py -${{ matrix.python }}-${{ matrix.wordsize }}"
        shell: bash
        run: |
          set -ex
          git reset --hard
          cd python
          ${PYTHON} -VV
          # Fix symlinks for windows
          rm -r c-library
          mkdir c-library
          cp -r --dereference ../c/tskit c-library/
          cp ../c/tskit.h c-library/
          ${PYTHON} setup.py build_ext --inplace
      - name: Build Wheel
        env:
          PYTHON: "py -${{ matrix.python }}-${{ matrix.wordsize }}"
        shell: bash
        run: |
          set -ex
          cd python
          ${PYTHON} setup.py bdist_wheel
      - name: Upload Wheels
        uses: actions/upload-artifact@v2
        with:
          name: win-wheel-${{ matrix.python }}-${{ matrix.wordsize }}
          path: python/dist

  manylinux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
            submodules: true

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Build sdist
        shell: bash
        run: |
          cd python
          python setup.py sdist

      - name: Upload sdist
        uses: actions/upload-artifact@v2
        with:
          name: sdist
          path: python/dist

      - name: Build wheels in docker
        shell: bash
        run: |
          docker run --rm -v `pwd`:/project -w /project quay.io/pypa/manylinux2010_x86_64 bash .github/workflows/docker/buildwheel.sh

      - name: Upload Wheels
        uses: actions/upload-artifact@v2
        with:
          name: linux-wheels
          path: python/dist/wheelhouse

  OSX-test:
    needs: ['OSX']
    runs-on: macos-latest
    strategy:
      matrix:
        python: [3.7, 3.8, 3.9]
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v2
        with:
          name: osx-wheel-${{ matrix.python }}
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Install wheel and test
        run: |
          python -VV
          # Install the local wheel
          pip install tskit --only-binary tskit -f .
          python -c "import tskit"

  windows-test:
    needs: ['windows']
    runs-on: windows-latest
    strategy:
      matrix:
        python: [3.7, 3.8, 3.9]
        wordsize: [64]
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v2
        with:
          name: win-wheel-${{ matrix.python }}-${{ matrix.wordsize }}
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Install wheel and test
        run: |
          python -VV
          # Install the local wheel
          pip install tskit --only-binary tskit -f .
          python -c "import tskit"

  manylinux-test:
    runs-on: ubuntu-latest
    needs: ['manylinux']
    strategy:
      matrix:
        python: [3.7, 3.8, 3.9]
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v2
        with:
          name: linux-wheels
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Install wheel and test
        run: |
          python -VV
          # Install the local wheel
          pip install tskit --only-binary tskit -f .
          python -c "import tskit"


  PyPI_Upload:
    runs-on: ubuntu-latest
    needs: ['windows-test', 'OSX-test', 'manylinux-test']
    steps:
      - name: Download all
        uses: actions/download-artifact@v2
      - name: Move to dist
        run: |
          mkdir dist
          cp */*.{whl,gz} dist/.
      - name: Publish distribution to Test PyPI
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags') && !contains(github.event.ref, 'C_')
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.test_pypi_password }}
          repository_url: https://test.pypi.org/legacy/
      - name: Publish distribution to PRODUCTION PyPI
        if: github.event_name == 'release' && !startsWith(github.event.release.tag_name, 'C_')
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.pypi_password }}
