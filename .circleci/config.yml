version: 2.1

commands:
  setup:
    steps:
      - run:
          name: Install dependencies and set path
          command: |
            sudo apt-get update
            sudo apt-get install -y ninja-build libcunit1-dev valgrind clang doxygen python3-pip
            # Install meson to the system packages so we can run it as root
            sudo pip install meson
            pip install numpy==1.18.5
            pip install --user -r python/requirements/CI-complete/requirements.txt
            ARGO_NET_GIT_FETCH_WITH_CLI=1 pip install twine --user
            # Remove tskit installed by msprime
            pip uninstall tskit -y
            echo 'export PATH=/home/circleci/.local/bin:$PATH' >> $BASH_ENV

  compile_and_test:
    steps:
      - run:
          name: Compile Python
          command: |
            cd python && make allchecks

      - run:
          name: Compile C with gcc
          command: |
            meson build-gcc c -D b_coverage=true
            ninja -C build-gcc

      - run:
          name: Compile C with clang
          command: |
            CC=clang CXX=clang++ meson build-clang c
            ninja -C build-clang

      - run:
          name: Compile C with gcc in 64 bit mode
          command: |
            CFLAGS=-D_TSK_BIG_TABLES CPPFLAGS=-D_TSK_BIG_TABLES meson build-gcc-bt c
            ninja -C build-gcc-bt

      - run:
          name: Run C tests
          command: |
            ninja -C build-gcc test

      - run:
          name: Run gcov & upload coverage.
          command: |
            cd build-gcc
            find ../c/tskit/*.c -type f -printf "%f\n" | xargs -i gcov -pb libtskit.a.p/tskit_{}.gcno ../c/tskit/{}
            cd ..
            bash <(curl -s https://codecov.io/bash) -X gcov -X coveragepy -F c-tests

      - run:
          name: Valgrind for C tests.
          command: |
            valgrind --leak-check=full --error-exitcode=1 ./build-gcc/test_core
            valgrind --leak-check=full --error-exitcode=1 ./build-gcc/test_tables
            valgrind --leak-check=full --error-exitcode=1 ./build-gcc/test_trees
            valgrind --leak-check=full --error-exitcode=1 ./build-gcc/test_genotypes
            valgrind --leak-check=full --error-exitcode=1 ./build-gcc/test_convert
            valgrind --leak-check=full --error-exitcode=1 ./build-gcc/test_stats
            valgrind --leak-check=full --error-exitcode=1 ./build-gcc/test_haplotype_matching
            valgrind --leak-check=full --error-exitcode=1 ./build-gcc/test_file_format
            valgrind --leak-check=full --error-exitcode=1 ./build-gcc/test_minimal_cpp

      - run:
          name: Valgrind for BIG_TABLES C tests.
          command: |
            valgrind --leak-check=full --error-exitcode=1 ./build-gcc-bt/test_core
            valgrind --leak-check=full --error-exitcode=1 ./build-gcc-bt/test_tables
            valgrind --leak-check=full --error-exitcode=1 ./build-gcc-bt/test_trees
            valgrind --leak-check=full --error-exitcode=1 ./build-gcc-bt/test_genotypes
            valgrind --leak-check=full --error-exitcode=1 ./build-gcc-bt/test_convert
            valgrind --leak-check=full --error-exitcode=1 ./build-gcc-bt/test_stats
            valgrind --leak-check=full --error-exitcode=1 ./build-gcc-bt/test_haplotype_matching
            valgrind --leak-check=full --error-exitcode=1 ./build-gcc-bt/test_file_format
            valgrind --leak-check=full --error-exitcode=1 ./build-gcc-bt/test_minimal_cpp

      - run:
          name: Run clang-compiled C tests
          command: |
            ninja -C build-clang test

      - run:
          name: Test building with meson subproject
          command: |
            meson build-subproject c/tests/meson-subproject
            ninja -C build-subproject
            ./build-subproject/example

      - run:
          name: Install shared library and hand-compile program.
          command: |
            meson build-install c --prefix=/usr
            sudo ninja -C build-install install
            clang c/examples/api_structure.c -I c/subprojects/kastore -o api_structure -ltskit
            ./api_structure

      - run:
          name: Run example make file
          command: |
            make -C c/examples

      - run:
          name: Build example LWT interface code and test
          command: |
            # We're assuming that the tskit C module has already
            # been built, as we're testing against the local tskit version.
            cd python/lwt_interface
            make allchecks
            python -m pytest -n2

      - run:
          name: Upload LWT coverage
          command: |
            # Make sure the C coverage reports aren't lying around
            rm -fR build-gcc
            ls -R
            cd python/lwt_interface
            gcov -pb -o ./build/temp.linux*/*.gcno example_c_module.c
            bash <(curl -s https://codecov.io/bash) -X gcov -F lwt-tests

      - run:
          name: Run Python tests
          command: |
            cd python
            python -m pytest --cov=tskit  --cov-report=xml --cov-branch -n2 tests/test_lowlevel.py tests/test_tables.py tests/test_file_format.py

      - run:
          name: Upload Python coverage
          command: |
            # Make sure the C coverage reports aren't lying around
            rm -fR build-gcc
            cd python
            gcov -pb -o ./build/temp.linux*/*.gcno _tskitmodule.c
            bash <(curl -s https://codecov.io/bash) -X gcov -F python-c-tests

      - run:
          name: Build Python package
          command: |
            cd python
            rm -fR build
            python setup.py sdist
            python setup.py check
            python -m twine check dist/*.tar.gz
            python -m venv venv
            source venv/bin/activate
            pip install --upgrade setuptools pip wheel
            python setup.py build_ext
            python setup.py egg_info
            python setup.py bdist_wheel
            pip install dist/*.tar.gz
            tskit --help

jobs:
  build:
    docker:
      - image: cimg/python:3.7
    working_directory: /home/circleci/tskit
    steps:
      - checkout
      - run: sudo chown -R circleci:circleci *
      - restore_cache:
          # It's sometimes necessary to nuke the cache, and the simplest
          # way to do it is to change the key. We can increment this
          # version number when we want to do this.
          key: tskit-{{ .Branch }}-v6
      - setup
      - save_cache:
          key: tskit-{{ .Branch }}-v6
          paths:
            - "/home/circleci/.local"
      - compile_and_test

  build-32:
    docker:
      - image: tskitimages/testing-32bit:2.0
    working_directory: /home/circleci/tskit
    steps:
      - checkout
      - run: sudo chown -R circleci:circleci *
      - restore_cache:
          key: tskit-32-{{ .Branch }}-v7
      - setup
      - save_cache:
          key: tskit-32-{{ .Branch }}-v7
          paths:
            - "/home/circleci/.local"
      - compile_and_test

workflows:
  test:
    jobs:
      - build
      - build-32


